import { User, UserId } from './user';
declare type PropOrFactory<T> = T | ((index: number) => T);
export declare class UserFakeBuilder<TBuild = any> {
    private _entity_id;
    private _name;
    private _email;
    private _password;
    private _avatar;
    private _is_active;
    private _created_at;
    private countObjs;
    static aUser(): UserFakeBuilder<User>;
    static theUsers(countObjs: number): UserFakeBuilder<User[]>;
    private chance;
    private constructor();
    withEntityId(valueOrFactory: PropOrFactory<UserId>): this;
    withName(valueOrFactory: PropOrFactory<string>): this;
    withInvalidNameEmpty(value: '' | null | undefined): this;
    withInvalidNameNotAString(value?: any): this;
    withInvalidNameTooLong(value?: string): this;
    withEmail(valueOrFactory: PropOrFactory<string>): this;
    withAvatar(valueOrFactory: PropOrFactory<string | null>): this;
    activate(): this;
    deactivate(): this;
    withInvalidIsActiveEmpty(value: '' | null | undefined): this;
    withInvalidIsActiveNotABoolean(value?: any): this;
    withCreatedAt(valueOrFactory: PropOrFactory<Date>): this;
    build(): TBuild;
    get entity_id(): any;
    get name(): any;
    get email(): any;
    get password(): any;
    get avatar(): any;
    get is_active(): any;
    get created_at(): any;
    private getValue;
    private callFactory;
}
export {};
